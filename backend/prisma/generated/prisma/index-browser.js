
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AnalyticsEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  sessionId: 'sessionId',
  payload: 'payload',
  timestamp: 'timestamp',
  tenantId: 'tenantId'
};

exports.Prisma.SearchQueryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  query: 'query',
  resultsCount: 'resultsCount',
  filters: 'filters',
  sessionId: 'sessionId',
  createdAt: 'createdAt',
  tenantId: 'tenantId'
};

exports.Prisma.BlogCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.BlogPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  content: 'content',
  excerpt: 'excerpt',
  imageUrl: 'imageUrl',
  status: 'status',
  publishedAt: 'publishedAt',
  authorId: 'authorId',
  categoryId: 'categoryId',
  views: 'views',
  allowComments: 'allowComments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.BlogTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.BlogPostsOnTagsScalarFieldEnum = {
  postId: 'postId',
  tagId: 'tagId',
  assignedAt: 'assignedAt'
};

exports.Prisma.BlogCommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  parentId: 'parentId',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  menuItemId: 'menuItemId',
  variantId: 'variantId',
  quantity: 'quantity',
  addedAt: 'addedAt'
};

exports.Prisma.HeroSliderScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  imageUrl: 'imageUrl',
  price: 'price',
  buttonText: 'buttonText',
  linkUrl: 'linkUrl',
  linkType: 'linkType',
  linkTargetId: 'linkTargetId',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.DealSectionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  timerDays: 'timerDays',
  timerHours: 'timerHours',
  timerMinutes: 'timerMinutes',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  imageUrl: 'imageUrl',
  hurryText: 'hurryText',
  buttonText: 'buttonText',
  buttonLink: 'buttonLink',
  linkType: 'linkType',
  linkTargetId: 'linkTargetId',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.OfferBannerScalarFieldEnum = {
  id: 'id',
  discount: 'discount',
  image: 'image',
  title: 'title',
  subtitle: 'subtitle',
  buttonText: 'buttonText',
  buttonLink: 'buttonLink',
  linkType: 'linkType',
  linkTargetId: 'linkTargetId',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.NewArrivalsSectionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.TabScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  sectionId: 'sectionId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.OfferSectionScalarFieldEnum = {
  id: 'id',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.OfferSectionBannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  buttonText: 'buttonText',
  buttonLink: 'buttonLink',
  offerSectionId: 'offerSectionId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.SliderScalarFieldEnum = {
  id: 'id',
  title: 'title',
  offerSectionId: 'offerSectionId',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.MenuItemsOnSlidersScalarFieldEnum = {
  menuItemId: 'menuItemId',
  sliderId: 'sliderId',
  assignedAt: 'assignedAt',
  order: 'order'
};

exports.Prisma.RestaurantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  imageUrl: 'imageUrl',
  restaurantPageUrl: 'restaurantPageUrl',
  productCount: 'productCount',
  salesCount: 'salesCount',
  phone: 'phone',
  email: 'email',
  address: 'address',
  description: 'description',
  createdAt: 'createdAt',
  ownerId: 'ownerId',
  isActive: 'isActive',
  timezone: 'timezone',
  currency: 'currency',
  location: 'location',
  businessHours: 'businessHours',
  brandId: 'brandId',
  theme: 'theme',
  rating: 'rating',
  ratingCount: 'ratingCount',
  deliveryFeeStructure: 'deliveryFeeStructure'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logoUrl: 'logoUrl',
  description: 'description',
  websiteUrl: 'websiteUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  order: 'order',
  parentId: 'parentId',
  restaurantId: 'restaurantId',
  discountPercentage: 'discountPercentage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  sku: 'sku',
  finalPrice: 'finalPrice',
  mrp: 'mrp',
  discountPercentage: 'discountPercentage',
  stockStatus: 'stockStatus',
  rating: 'rating',
  ratingCount: 'ratingCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  restaurantId: 'restaurantId',
  isActive: 'isActive',
  categoryId: 'categoryId',
  currency: 'currency',
  lastUpdatedBy: 'lastUpdatedBy',
  availabilitySchedule: 'availabilitySchedule',
  prepTime: 'prepTime',
  isFeatured: 'isFeatured',
  maxOrderQuantity: 'maxOrderQuantity',
  minOrderQuantity: 'minOrderQuantity',
  allergens: 'allergens',
  nutritionInfo: 'nutritionInfo',
  tenantId: 'tenantId',
  deletedAt: 'deletedAt',
  brandId: 'brandId',
  color: 'color',
  weightUnit: 'weightUnit',
  isVisible: 'isVisible',
  searchKeywords: 'searchKeywords',
  taxRateId: 'taxRateId',
  dietaryLabel: 'dietaryLabel',
  quantityLabel: 'quantityLabel',
  flags: 'flags',
  dealSectionId: 'dealSectionId',
  newArrivalsSectionId: 'newArrivalsSectionId',
  tabId: 'tabId'
};

exports.Prisma.MenuItemAuditScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId'
};

exports.Prisma.MenuItemVariantScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  weight: 'weight',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.MenuItemImageScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  imageUrl: 'imageUrl',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt',
  altText: 'altText',
  order: 'order'
};

exports.Prisma.MenuItemSpecificationScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  specKey: 'specKey',
  specValue: 'specValue',
  createdAt: 'createdAt'
};

exports.Prisma.MenuItemAttributeScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  key: 'key',
  value: 'value',
  language: 'language'
};

exports.Prisma.MenuItemPriceHistoryScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  variantId: 'variantId',
  finalPrice: 'finalPrice',
  mrp: 'mrp',
  discountPercentage: 'discountPercentage',
  effectiveFrom: 'effectiveFrom',
  effectiveUntil: 'effectiveUntil',
  createdAt: 'createdAt'
};

exports.Prisma.MenuItemReviewScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  userId: 'userId',
  userName: 'userName',
  userImageUrl: 'userImageUrl',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.RelatedMenuItemScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  relatedItemId: 'relatedItemId',
  createdAt: 'createdAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuScalarFieldEnum = {
  id: 'id',
  restaurantId: 'restaurantId',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.MenuItemsOnMenusScalarFieldEnum = {
  menuItemId: 'menuItemId',
  menuId: 'menuId',
  assignedAt: 'assignedAt',
  order: 'order'
};

exports.Prisma.MenuItemRecommendationScalarFieldEnum = {
  id: 'id',
  sourceMenuItemId: 'sourceMenuItemId',
  targetMenuItemId: 'targetMenuItemId',
  reason: 'reason',
  score: 'score',
  createdAt: 'createdAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  restaurantId: 'restaurantId',
  status: 'status',
  paymentStatus: 'paymentStatus',
  subtotal: 'subtotal',
  tax: 'tax',
  deliveryFee: 'deliveryFee',
  discount: 'discount',
  total: 'total',
  notes: 'notes',
  deliveryAddress: 'deliveryAddress',
  estimatedDeliveryTime: 'estimatedDeliveryTime',
  actualDeliveryTime: 'actualDeliveryTime',
  cancelReason: 'cancelReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  orderType: 'orderType',
  deliveryInstructions: 'deliveryInstructions',
  source: 'source',
  priority: 'priority',
  correlationId: 'correlationId',
  tenantId: 'tenantId'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  menuItemId: 'menuItemId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  subtotal: 'subtotal',
  notes: 'notes'
};

exports.Prisma.OrderAuditScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  operation: 'operation',
  changedBy: 'changedBy',
  changes: 'changes',
  timestamp: 'timestamp'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  status: 'status',
  transactionId: 'transactionId',
  gatewayResponse: 'gatewayResponse',
  refundStatus: 'refundStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  driverId: 'driverId',
  status: 'status',
  trackingUrl: 'trackingUrl',
  assignedAt: 'assignedAt',
  pickedUpAt: 'pickedUpAt',
  completedAt: 'completedAt',
  tenantId: 'tenantId',
  createdAt: 'createdAt'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  vehicleInfo: 'vehicleInfo',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.OrderCancellationScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  reason: 'reason',
  requestedBy: 'requestedBy',
  approvedBy: 'approvedBy',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AllergenScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.MenuItemAllergenScalarFieldEnum = {
  menuItemId: 'menuItemId',
  allergenId: 'allergenId',
  createdAt: 'createdAt'
};

exports.Prisma.TaxRateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  rate: 'rate',
  region: 'region',
  effectiveFrom: 'effectiveFrom',
  isActive: 'isActive',
  restaurantId: 'restaurantId',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailQueueScalarFieldEnum = {
  id: 'id',
  to: 'to',
  subject: 'subject',
  html: 'html',
  text: 'text',
  priority: 'priority',
  template: 'template',
  templateData: 'templateData',
  status: 'status',
  scheduledFor: 'scheduledFor',
  processedAt: 'processedAt',
  completedAt: 'completedAt',
  failedAt: 'failedAt',
  retryCount: 'retryCount',
  maxRetries: 'maxRetries',
  lastError: 'lastError',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OAuthTokenScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  service: 'service',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  tokenType: 'tokenType',
  scope: 'scope',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  variantId: 'variantId',
  quantity: 'quantity',
  reorderThreshold: 'reorderThreshold',
  status: 'status',
  lastUpdated: 'lastUpdated',
  supplierId: 'supplierId',
  restaurantId: 'restaurantId',
  tenantId: 'tenantId',
  location: 'location'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.LoyaltyProgramScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  pointsPerDollar: 'pointsPerDollar',
  rewardThreshold: 'rewardThreshold',
  rewardType: 'rewardType',
  rewardValue: 'rewardValue',
  isActive: 'isActive',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.LoyaltyTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orderId: 'orderId',
  programId: 'programId',
  pointsChange: 'pointsChange',
  transactionType: 'transactionType',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  channel: 'channel',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  readAt: 'readAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  tenantId: 'tenantId'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  userId: 'userId',
  type: 'type',
  comment: 'comment',
  rating: 'rating',
  createdAt: 'createdAt',
  tenantId: 'tenantId'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  role: 'role',
  permissionId: 'permissionId',
  grantedAt: 'grantedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  refreshToken: 'refreshToken',
  ipAddress: 'ipAddress',
  deviceInfo: 'deviceInfo',
  expiresAt: 'expiresAt',
  revokedAt: 'revokedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orderId: 'orderId',
  subject: 'subject',
  description: 'description',
  status: 'status',
  priority: 'priority',
  assignedTo: 'assignedTo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt',
  closedAt: 'closedAt',
  tenantId: 'tenantId'
};

exports.Prisma.SupportResponseScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  responderId: 'responderId',
  message: 'message',
  isInternal: 'isInternal',
  attachments: 'attachments',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  phoneNumber: 'phoneNumber',
  lastLoginAt: 'lastLoginAt',
  accountStatus: 'accountStatus',
  privacyConsent: 'privacyConsent',
  consentGivenAt: 'consentGivenAt',
  language: 'language',
  timezone: 'timezone',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  failedLoginAttempts: 'failedLoginAttempts',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  attributes: 'attributes',
  defaultCurrency: 'defaultCurrency',
  lastActivityAt: 'lastActivityAt',
  loyaltyPoints: 'loyaltyPoints'
};

exports.Prisma.UserAuditScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  operation: 'operation',
  changedBy: 'changedBy',
  changes: 'changes',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  label: 'label',
  street: 'street',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  menuItemId: 'menuItemId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.BlogPostStatus = exports.$Enums.BlogPostStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.SliderLinkType = exports.$Enums.SliderLinkType = {
  RESTAURANT: 'RESTAURANT',
  MENU_ITEM: 'MENU_ITEM',
  CATEGORY: 'CATEGORY',
  CAMPAIGN: 'CAMPAIGN',
  EXTERNAL_URL: 'EXTERNAL_URL',
  NONE: 'NONE'
};

exports.InventoryStatus = exports.$Enums.InventoryStatus = {
  IN_STOCK: 'IN_STOCK',
  LOW_STOCK: 'LOW_STOCK',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  DISCONTINUED: 'DISCONTINUED'
};

exports.WeightUnit = exports.$Enums.WeightUnit = {
  GRAM: 'GRAM',
  KILOGRAM: 'KILOGRAM',
  OUNCE: 'OUNCE',
  POUND: 'POUND'
};

exports.RecommendationReason = exports.$Enums.RecommendationReason = {
  POPULAR: 'POPULAR',
  FREQUENTLY_BOUGHT_TOGETHER: 'FREQUENTLY_BOUGHT_TOGETHER',
  AI_SUGGESTED: 'AI_SUGGESTED',
  MANUAL: 'MANUAL'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PREPARING: 'PREPARING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  AUTHORIZED: 'AUTHORIZED',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  PARTIALLY_REFUNDED: 'PARTIALLY_REFUNDED'
};

exports.OrderType = exports.$Enums.OrderType = {
  DELIVERY: 'DELIVERY',
  PICKUP: 'PICKUP',
  DINE_IN: 'DINE_IN'
};

exports.PriorityLevel = exports.$Enums.PriorityLevel = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  PAYPAL: 'PAYPAL',
  STRIPE: 'STRIPE',
  CASH: 'CASH',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.ReturnStatus = exports.$Enums.ReturnStatus = {
  NONE: 'NONE',
  REQUESTED: 'REQUESTED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED'
};

exports.DeliveryStatus = exports.$Enums.DeliveryStatus = {
  PENDING: 'PENDING',
  ASSIGNED: 'ASSIGNED',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

exports.OrderCancellationStatus = exports.$Enums.OrderCancellationStatus = {
  REQUESTED: 'REQUESTED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.EmailStatus = exports.$Enums.EmailStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.LoyaltyTransactionType = exports.$Enums.LoyaltyTransactionType = {
  EARNED: 'EARNED',
  REDEEMED: 'REDEEMED',
  EXPIRED: 'EXPIRED',
  ADJUSTED: 'ADJUSTED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ORDER_STATUS: 'ORDER_STATUS',
  PROMOTION: 'PROMOTION',
  PASSWORD_RESET: 'PASSWORD_RESET',
  ACCOUNT_UPDATE: 'ACCOUNT_UPDATE',
  NEW_MESSAGE: 'NEW_MESSAGE',
  SYSTEM_ALERT: 'SYSTEM_ALERT'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PUSH: 'PUSH',
  IN_APP: 'IN_APP'
};

exports.FeedbackType = exports.$Enums.FeedbackType = {
  RESTAURANT: 'RESTAURANT',
  DELIVERY: 'DELIVERY',
  MENU_ITEM: 'MENU_ITEM',
  SERVICE: 'SERVICE'
};

exports.UserRole = exports.$Enums.UserRole = {
  CUSTOMER: 'CUSTOMER',
  RESTAURANT_OWNER: 'RESTAURANT_OWNER',
  RESTAURANT_STAFF: 'RESTAURANT_STAFF',
  DRIVER: 'DRIVER',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.SupportTicketStatus = exports.$Enums.SupportTicketStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  WAITING_FOR_CUSTOMER: 'WAITING_FOR_CUSTOMER',
  WAITING_FOR_SUPPORT: 'WAITING_FOR_SUPPORT'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION',
  DELETED: 'DELETED'
};

exports.Prisma.ModelName = {
  AnalyticsEvent: 'AnalyticsEvent',
  SearchQuery: 'SearchQuery',
  BlogCategory: 'BlogCategory',
  BlogPost: 'BlogPost',
  BlogTag: 'BlogTag',
  BlogPostsOnTags: 'BlogPostsOnTags',
  BlogComment: 'BlogComment',
  Cart: 'Cart',
  CartItem: 'CartItem',
  HeroSlider: 'HeroSlider',
  DealSection: 'DealSection',
  Banner: 'Banner',
  OfferBanner: 'OfferBanner',
  NewArrivalsSection: 'NewArrivalsSection',
  Tab: 'Tab',
  OfferSection: 'OfferSection',
  OfferSectionBanner: 'OfferSectionBanner',
  Slider: 'Slider',
  MenuItemsOnSliders: 'MenuItemsOnSliders',
  Restaurant: 'Restaurant',
  Brand: 'Brand',
  Category: 'Category',
  MenuItem: 'MenuItem',
  MenuItemAudit: 'MenuItemAudit',
  MenuItemVariant: 'MenuItemVariant',
  MenuItemImage: 'MenuItemImage',
  MenuItemSpecification: 'MenuItemSpecification',
  MenuItemAttribute: 'MenuItemAttribute',
  MenuItemPriceHistory: 'MenuItemPriceHistory',
  MenuItemReview: 'MenuItemReview',
  RelatedMenuItem: 'RelatedMenuItem',
  Tag: 'Tag',
  Menu: 'Menu',
  MenuItemsOnMenus: 'MenuItemsOnMenus',
  MenuItemRecommendation: 'MenuItemRecommendation',
  Order: 'Order',
  OrderItem: 'OrderItem',
  OrderAudit: 'OrderAudit',
  Payment: 'Payment',
  Delivery: 'Delivery',
  Driver: 'Driver',
  OrderCancellation: 'OrderCancellation',
  Allergen: 'Allergen',
  MenuItemAllergen: 'MenuItemAllergen',
  TaxRate: 'TaxRate',
  EmailQueue: 'EmailQueue',
  OAuthToken: 'OAuthToken',
  Inventory: 'Inventory',
  Supplier: 'Supplier',
  LoyaltyProgram: 'LoyaltyProgram',
  LoyaltyTransaction: 'LoyaltyTransaction',
  Notification: 'Notification',
  Feedback: 'Feedback',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  Session: 'Session',
  SupportTicket: 'SupportTicket',
  SupportResponse: 'SupportResponse',
  User: 'User',
  UserAudit: 'UserAudit',
  Address: 'Address',
  Wishlist: 'Wishlist'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
